---
layout: post
title:  "Xor DDoS Attacks: Definition, Architecture and Mitigation"
date:   2020-04-29 17:58:32 +0200
categories: alecsahew github.io xor-ddos attacks
---

### Xor DDoS Attacks: Definition 

Xor DDoS is a Distributed Denial of Service Attack.  

XOR DDoS is a trojan malware hiding itself with an embedded rootkit that infects Linux systems. It is built for multiple Linux architectures like ARM, x86 and x64. 

The name comes from the XOR encryption which it is used in both malware and network communication to the C&Cs.

Attackers build botnets using compromised Linux systems to launch DDoS attacks.

### Xor DDoS Attacks: The Botnet 

A botnet is collection of devices as PC, Smartphone, IoT connected via Internet, whose security have been breached and infected by a malicious software. The compromised device is called "bot".

The "bot" is  remotely controlled by a third party. The third party controls the botnet using command&control software.  

The Botnet comunicates via standards-based network protocols as IRC (Internet Relay Chat) , HTTP ( Hypertext Transfer Protocol). 

The botnet is used to performe DDoS attacks (distributed-denial-of-service attacks), send spam, steal data. 

The attacker seeks to make a network/maschine unavailable flooding the target with superfluous requests originating from many different sources or making them crashing.

### Xor DDoS Attacks: Structure

#### Brute Force Attack 

The malware gains access via Secure Shell with the credentials of the root user. Once SSH credentials are acquired and login is successful, it uses root privileges to run a script that downloads and installs XOR DDoS.

[The malware is dropped and the installation process begins][ddos-lnk01]

Footprint of the dropped malware:

    ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), statically linked, for GNU/Linux 2.6.9, not stripped

    26: 00000000     0 FILE    LOCAL  DEFAULT  ABS crtstuff.c
    36: 00000000     0 FILE    LOCAL  DEFAULT  ABS crtstuff.c
    41: 00000000     0 FILE    LOCAL  DEFAULT  ABS autorun.c
    42: 00000000     0 FILE    LOCAL  DEFAULT  ABS crc32.c
    43: 00000000     0 FILE    LOCAL  DEFAULT  ABS encrypt.c
    44: 00000000     0 FILE    LOCAL  DEFAULT  ABS execpacket.c
    45: 00000000     0 FILE    LOCAL  DEFAULT  ABS buildnet.c
    46: 00000000     0 FILE    LOCAL  DEFAULT  ABS hide.c
    47: 00000000     0 FILE    LOCAL  DEFAULT  ABS http.c
    48: 00000000     0 FILE    LOCAL  DEFAULT  ABS kill.c
    49: 00000000     0 FILE    LOCAL  DEFAULT  ABS main.c
    50: 00000000     0 FILE    LOCAL  DEFAULT  ABS proc.c
    51: 00000000     0 FILE    LOCAL  DEFAULT  ABS socket.c
    52: 00000000     0 FILE    LOCAL  DEFAULT  ABS tcp.c
    53: 00000000     0 FILE    LOCAL  DEFAULT  ABS thread.c
    54: 00000000     0 FILE    LOCAL  DEFAULT  ABS findip.c
    55: 00000000     0 FILE    LOCAL  DEFAULT  ABS dns.c

#### Control Server Communication

The main procedure decrypts and selects the C&C server based on the architecture of the system. 

#### Obfuscation 

Configuration values are encrypted in the data section and decrypted at runtime 

    Num: Value        Size  Type    Bind     Vis        Ndx    Name
    1667: 08048228    56    FUNC    GLOBAL   DEFAULT    3      dec_conf

The procedure encrypt_code are used for both encryption and decryption.The encryption algorithm encrypts or decrypts data by XOR it with a hardcoded key 

    Num:  Value        Size  Type    Bind     Vis        Ndx     Name                         
    1842: 080493f4     84    FUNC    GLOBAL   DEFAULT    3       encrypt_code

#### Gathering

The malware collects system information, encrypts and sends them to C&C

    Num:  Value      Size Type    Bind   Vis        Ndx Name
    1905: 0804a670   107  FUNC    GLOBAL DEFAULT    3   CheckLKM
    1461: 0804ef5d   375  FUNC    GLOBAL DEFAULT    3   Get_AllIP
    1614: 0804b418   189  FUNC    GLOBAL DEFAULT    3   GetIndex
    1631: 0804e1d9   245  FUNC    GLOBAL DEFAULT    3   GetMemStat
    1750: 0804e2ce   539  FUNC    GLOBAL DEFAULT    3   GetCpuInfo
    2185: 0804e5e1   243  FUNC    GLOBAL DEFAULT    3   GetLanSpeed
        
    1842: 080493f4   84   FUNC    GLOBAL DEFAULT    3  encrypt_code
    
    1908: 0804eee7   118  FUNC    GLOBAL DEFAULT    3  safesend
    
### Xor DDoS Attacks: Persistence 

#### Persistence 

    1833: 08048652   207 FUNC    GLOBAL DEFAULT    3 writefile              
    2298: 0804911d   309 FUNC    GLOBAL DEFAULT    3 copyfile             

Copies itself with a 10 alpha char long randon name into 

    /boot/ 
    /etc/init.d 
    /lib/libudev.so*  ----> it may have other names /lib/udev/udev    
    /proc

Creates a cron job in 

    /etc/cron.hourly/cron.sh 
	/var/run/gcc.pid 

#### Attack Characteristics

SYN and DNS floods are generated by the Xor DDoS malware 

* TCP-SYN flooding: 
SYN packets are send to the server at high rates to make it crash 

* TCP-ACK flooding: 
spoofed ACK packets are send to the server at high rates, not so effective as SYN, but easier to bypass the protection mechanism

* DNS amplification 
DNS can be used to generate DNS response much larger than queries 

#### The Rootkit Features

The malware downloads a "Loadable Kernel Module" (LKM) from the control server.

    50: 00000000   0  FILE    LOCAL  DEFAULT  ABS proc.c

	1905: 0804a670   107 FUNC    GLOBAL DEFAULT    3 CheckLKM

This module runs in kernel space, and it is used to hide files and processes.
It creates a virtual device /proc/rs_dev and it calls syscalls

The malware communicates with the rootkit device via the ioctl system call 

	1685: 080690f0    33 FUNC    GLOBAL DEFAULT    3 __ioctl

### Xor DDoS Attacks: Mitigation and Remove

#### Countermeasure

* Use strong SSH passwords. Think to use private keyauthentication 
* Protect against brute force attacks using a tool like fail2ban 
* Disable root login or only allow it with private key authentication 
* Use of an IDS/IPS like SURICATA/SNORT with an up to date ruleset
* Add a XoR-DDoS Rule into your SIEM

#### Remove The Malware

* Identify the main PID and the dropped files in  /boot /etc/init.d and /proc/

      root@linux:/# ls -lha /boot | egrep "[a-z]{10}$"                     
      -rwxr-x---1 root root 606K Mar 29 11:42 PROCESSNAME                

      root@linux: ls -lha /etc/init.d/PROCESSNAME                    
      -rwxr-x---1 root root 28 Mar 29 11:42 /etc/init.d/PROCESSNAME              

      root@linux:/# find /proc/ -name exe 2> /dev/null | xargs -I{} ls -l {} 2> /dev/null | egrep '/boot/[a-z]{10}$'           
      lrwxrwxrwx 1 root root 0 Mar 29 11:42 /proc/nnnn/exe -> /boot/PROCESSNAME                    

    * find all executing processes --> find /proc/ -name exe 2> /dev/null 
    * get each processes symlinked destination --> xargs -I{} ls -l {} 2> /dev/null 
    * find symlinks that match our ‘/boot/PROCESSNAME’ signature --> egrep '/boot/[a-z]{10}$'
    * 
* Identify the supporting processes responsible for the persistence of the main procedure  

        root@linux: ps -eaf -u root | grep `date +%H:%M` | egrep -v "ps|grep"           
        root  PROCESSNUMBER   968  0 09:40 ?   00:00:00  PROCESSNAME

* Stop The Process / Remove the Files
    
    Note: Do not kill this process completely, as it will start with another name
      
        root@linux:#  kill -STOP PROCESSNUMBER

    Note: Before removing, bee sure what you are doing 

        root@linux:#  rm -f /boot/PROCESSNAME && rm -f /etc/init.d/PROCESSNAME && /lib/libudev.so*  

### References 

* [Analysing Honeypots Running In T-PoT Part 03][ddos-lnk01]
* [38-Day Long DDoS Siege Amounts to Over 50 Petabits in Bad Traffic][ddos-lnk02]
* [Protection against Denial of ServiceAttacks: A Survey][ddos-lnk03]
* [DDoS Quick Guide][ddos-lnk04]



[ddos-lnk01]:https://alecsahew.github.io/alecsahew/github.io/cowrie/t-pot/honeypot/analysis/2020/04/19/analysing-honeypots-running-in-tpot-part-03.html

[ddos-lnk02]:https://news.softpedia.com/news/38-Day-Long-DDoS-Siege-Amounts-to-Over-50-Petabits-in-Bad-Traffic-455722.shtml

[ddos-lnk03]:http://www.georgeloukas.com/publications/LoukasOke-DoSSurveyComputerJournal.pdf

[ddos-lnk04] https://www.us-cert.gov/sites/default/files/publications/DDoS%20Quick%20Guide.pdf